{"name": "test_TCID_103_Verify_product_category_functionality", "status": "broken", "statusDetails": {"message": "TypeError: not all arguments converted during string formatting", "trace": "self = <pageFactory.homePage.HomePage object at 0x0000021E79B63E10>, locator = ('xpath', \"//a[contains(.,'Samsung galaxy s6')]\")\n\n    def is_element_visible(self, locator):\n        try:\n            webelement = WebDriverWait(self.driver, 5).until(EC.visibility_of_element_located(locator))\n>           self.set_highlighter(webelement)\n\ngeneric\\wrapperFunction.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ngeneric\\wrapperFunction.py:144: in set_highlighter\n    self.driver.execute_script(\"arguments[0].setAttribute('style', arguments[1]);\", element)\n..\\DemoBlazeProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:407: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n..\\DemoBlazeProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021E797A1F90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF63D94E17F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE71C257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE8ECAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=126.0.6478.128); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF63D9DEEB2+31554]\nE       \t(No symbol) [0x00007FF63D957EE9]\nE       \t(No symbol) [0x00007FF63D81872A]\nE       \t(No symbol) [0x00007FF63D81E55E]\nE       \t(No symbol) [0x00007FF63D8211D8]\nE       \t(No symbol) [0x00007FF63D8AD69B]\nE       \t(No symbol) [0x00007FF63D88D02A]\nE       \t(No symbol) [0x00007FF63D8AC977]\nE       \t(No symbol) [0x00007FF63D88CDD3]\nE       \t(No symbol) [0x00007FF63D85A33B]\nE       \t(No symbol) [0x00007FF63D85AED1]\nE       \tGetHandleVerifier [0x00007FF63DCE8B2D+3217341]\nE       \tGetHandleVerifier [0x00007FF63DD35AF3+3532675]\nE       \tGetHandleVerifier [0x00007FF63DD2B0F0+3489152]\nE       \tGetHandleVerifier [0x00007FF63DA8E786+750614]\nE       \t(No symbol) [0x00007FF63D96376F]\nE       \t(No symbol) [0x00007FF63D95EB24]\nE       \t(No symbol) [0x00007FF63D95ECB2]\nE       \t(No symbol) [0x00007FF63D94E17F]\nE       \tBaseThreadInitThunk [0x00007FFEE71C257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE8ECAF28+40]\n\n..\\DemoBlazeProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.DemoBlazeEndToEndFlow_Test.Test_DemoBlazeEndToEndFlow object at 0x0000021E79757BD0>\n\n    @pytest.mark.usefixtures(\"timeStamp\")\n    def test_TCID_103_Verify_product_category_functionality(self):\n        test_data = ExcelUtil.get_excel_data(\"TestData.xlsx\",\n                                             \"test_TCID_103_Verify_product_category_functionality\")\n        home_page = HomePage(self.driver)\n        home_page.select_category(test_data[\"category_1\"])\n>       home_page.verify_products_are_visible(test_data[\"mob_product_1\"], test_data[\"mob_product_2\"],\n                                              test_data[\"mob_product_3\"])\n\ntestCases\\DemoBlazeEndToEndFlow_Test.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageFactory\\homePage.py:43: in verify_products_are_visible\n    self.is_element_visible((By.XPATH, f\"//a[contains(.,'{product}')]\"))\ngeneric\\wrapperFunction.py:99: in is_element_visible\n    TestUtil.logger.log(logging.INFO, \"erro\", error)\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:1559: in log\n    self._log(level, msg, args, **kwargs)\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:1634: in _log\n    self.handle(record)\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:1644: in handle\n    self.callHandlers(record)\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:1706: in callHandlers\n    hdlr.handle(record)\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:978: in handle\n    self.emit(record)\n..\\DemoBlazeProject\\.venv\\Lib\\site-packages\\_pytest\\logging.py:388: in emit\n    super().emit(record)\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:1118: in emit\n    self.handleError(record)\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:1110: in emit\n    msg = self.format(record)\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:953: in format\n    return fmt.format(record)\n..\\DemoBlazeProject\\.venv\\Lib\\site-packages\\_pytest\\logging.py:141: in format\n    return super().format(record)\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:687: in format\n    record.message = record.getMessage()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <LogRecord: root, 20, C:\\Users\\hp\\Desktop\\prashant\\Projects\\DemoBlaze-TAF\\generic\\wrapperFunction.py, 99, \"erro\">\n\n    def getMessage(self):\n        \"\"\"\n        Return the message for this LogRecord.\n    \n        Return the message for this LogRecord after merging any user-supplied\n        arguments with the message.\n        \"\"\"\n        msg = str(self.msg)\n        if self.args:\n>           msg = msg % self.args\nE           TypeError: not all arguments converted during string formatting\n\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:377: TypeError"}, "steps": [{"name": "select category", "status": "passed", "parameters": [{"name": "category", "value": "'Phones'"}], "start": 1721268421003, "stop": 1721268421595}, {"name": "verify products are visible", "status": "broken", "statusDetails": {"message": "TypeError: not all arguments converted during string formatting\n", "trace": "  File \"C:\\Users\\hp\\Desktop\\prashant\\Projects\\DemoBlazeProject\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\hp\\Desktop\\prashant\\Projects\\DemoBlaze-TAF\\pageFactory\\homePage.py\", line 43, in verify_products_are_visible\n    self.is_element_visible((By.XPATH, f\"//a[contains(.,'{product}')]\"))\n  File \"C:\\Users\\hp\\Desktop\\prashant\\Projects\\DemoBlaze-TAF\\generic\\wrapperFunction.py\", line 99, in is_element_visible\n    TestUtil.logger.log(logging.INFO, \"erro\", error)\n  File \"C:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py\", line 1559, in log\n    self._log(level, msg, args, **kwargs)\n  File \"C:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py\", line 1634, in _log\n    self.handle(record)\n  File \"C:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py\", line 1644, in handle\n    self.callHandlers(record)\n  File \"C:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py\", line 1706, in callHandlers\n    hdlr.handle(record)\n  File \"C:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py\", line 978, in handle\n    self.emit(record)\n  File \"C:\\Users\\hp\\Desktop\\prashant\\Projects\\DemoBlazeProject\\.venv\\Lib\\site-packages\\_pytest\\logging.py\", line 388, in emit\n    super().emit(record)\n  File \"C:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py\", line 1118, in emit\n    self.handleError(record)\n  File \"C:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py\", line 1110, in emit\n    msg = self.format(record)\n          ^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py\", line 953, in format\n    return fmt.format(record)\n           ^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\hp\\Desktop\\prashant\\Projects\\DemoBlazeProject\\.venv\\Lib\\site-packages\\_pytest\\logging.py\", line 141, in format\n    return super().format(record)\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py\", line 687, in format\n    record.message = record.getMessage()\n                     ^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py\", line 377, in getMessage\n    msg = msg % self.args\n          ~~~~^~~~~~~~~~~\n"}, "parameters": [{"name": "args", "value": "('Samsung galaxy s6', 'Nokia lumia 1520', 'Nexus 6')"}], "start": 1721268421597, "stop": 1721268423198}], "attachments": [{"name": "log", "source": "c3b1baf3-1ec2-4302-b122-b25ccb98a171-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "bf149a31-eabb-4485-adb2-ad2e5e2caf65-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "e8a6071a-6c03-4fa0-aa99-3743f67abaf2-attachment.txt", "type": "text/plain"}], "start": 1721268420986, "stop": 1721268423209, "uuid": "c953c56a-8196-490c-8bb9-58d40a7b4360", "historyId": "fa447fc76bf22da9933d0822dcefe56b", "testCaseId": "fa447fc76bf22da9933d0822dcefe56b", "fullName": "testCases.DemoBlazeEndToEndFlow_Test.Test_DemoBlazeEndToEndFlow#test_TCID_103_Verify_product_category_functionality", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('timeStamp')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "DemoBlazeEndToEndFlow_Test"}, {"name": "subSuite", "value": "Test_DemoBlazeEndToEndFlow"}, {"name": "host", "value": "LAPTOP-D2IU85TI"}, {"name": "thread", "value": "25520-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.DemoBlazeEndToEndFlow_Test"}]}